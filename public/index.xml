<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Christopher McKenzie</title>
    <link>http://chrismckenzie.io/</link>
    <description>Recent content on Christopher McKenzie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://chrismckenzie.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Out with the old</title>
      <link>http://chrismckenzie.io/projects/suburban/posts/out_with_the_old/</link>
      <pubDate>Wed, 28 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://chrismckenzie.io/projects/suburban/posts/out_with_the_old/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Deploying Anything with Dropship</title>
      <link>http://chrismckenzie.io/posts/deploy-anything/</link>
      <pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://chrismckenzie.io/posts/deploy-anything/</guid>
      <description>So it has been a while since I last touched on the problem of deploying software to a server, with that being said I have had a chance to really dig in and find a solution that is flexible as well as simple for developers to setup.
The Idea So when I started down this path of finding a clean deployment flow for my company (The Control Group) I had a few requirements It had to work for all of the different types of applications and languages that we build; I also did not want to use web hooks they are just too clunky and you have to have a server that is accesible on the internet so it can be called (not really a fan); The last thing that I wanted to be able to do is to deploy multiple versions of an application.</description>
    </item>
    
    <item>
      <title>Breakfast Burrito</title>
      <link>http://chrismckenzie.io/recipes/breakfast_burrito/</link>
      <pubDate>Fri, 24 Jul 2015 23:16:34 -0700</pubDate>
      
      <guid>http://chrismckenzie.io/recipes/breakfast_burrito/</guid>
      <description> This recipe serves 8
Ingredients  2 lb - Tillamook Medium Cheddar Cheese 1 lb - Sage Sausage 2 lb - Thick cut peppered bacon 16 - Eggs 1 tbsp - Butter 8 - XXL Flour Tortillas  Instructions  Cook Sausage, Bacon, and Eggs seperately Mix All Ingredients in pot with cheese Wrap ~1lb of mixture in lightly warmed tortilla.  </description>
    </item>
    
    <item>
      <title>Spaghetti</title>
      <link>http://chrismckenzie.io/recipes/spaghetti/</link>
      <pubDate>Fri, 24 Jul 2015 23:12:28 -0700</pubDate>
      
      <guid>http://chrismckenzie.io/recipes/spaghetti/</guid>
      <description> Ingredients  1 - 106oz. Can Tomato Sauce 8- 6oz. Can Tomato Paste 1&amp;frasl;2 Cup Granulated Garlic 1&amp;frasl;3 Cup Whole Oregano 3&amp;frasl;8 Cup Worcestershire 1&amp;frasl;3 Cup Italian Dressing 1&amp;frasl;8 Cup Lemon Juice 1&amp;frasl;8 Cup Sugar 2 Pounds Hamburger (pre-cooked) 3- 4oz. Can Mushrooms (Optional) 1 1&amp;frasl;2 Cans of Water (Tomato Sauce Can) dash of pepper  Instructions  In large pot place first 8 ingredients than add 1&amp;frasl;2 Can of water and mix thoroughly (can us mixer if needed) Once thoroughly mixed add rest of water and stir by hand Heat on low flame until hot throughout stirring occasionally Turn off stove and let mixture cool Turn on stove low flame again and again heat sauce Brown meat in skillet until thoroughly cooked Drain all fat off of meat and rinse thoroughly Add meat to sauce May add mushrooms if desired Heat and cool approximately 6 hours serve with evergood hot links  </description>
    </item>
    
    <item>
      <title>Deploying with Go</title>
      <link>http://chrismckenzie.io/posts/deploying-with-golang/</link>
      <pubDate>Mon, 23 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://chrismckenzie.io/posts/deploying-with-golang/</guid>
      <description>Recently I have been building a lot of go applications, and I think I have come up with a good pattern for building an app that is ready for deployment to either a server or to users. This includes build/run for development, testing, dependency management, and packaging. While this process is still being actively developed I believe it is at a state in which to share.
The Structure I keep a very simple structure for my projects and it is as follows.</description>
    </item>
    
    <item>
      <title>3D Hobby Shop Extra 330SC</title>
      <link>http://chrismckenzie.io/aircraft/3dhs-extra-330sc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://chrismckenzie.io/aircraft/3dhs-extra-330sc/</guid>
      <description>Specs Wingspan: 72 in (182.88 cm)
Overall Length: 69 in (175.26)
Wing Area: 1000 sq. in. (64.516 sq. dm.)
Flying Weight: 9.5 lb (4.3 kg)</description>
    </item>
    
    <item>
      <title>Dropship</title>
      <link>http://chrismckenzie.io/projects/dropship/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://chrismckenzie.io/projects/dropship/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hanger 9 P51D</title>
      <link>http://chrismckenzie.io/aircraft/h9-p51/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://chrismckenzie.io/aircraft/h9-p51/</guid>
      <description> Specs: Wingspan: 89.0 in (226 cm)
Overall Length: 77.5 in (197 cm)
Wing Area: 1420 sq. in. (96.1 sq. dm.)
Flying Weight: 26.0-28.5 lb (11.8-13.0 kg)
Engine: DA 60cc
Radio: Spektrum AR12020 12-Channel DSMX/XPlus Receiver
Links  Kit: Hanger 9 P51D Receiver: Spektrum AR12020 12-Channel DSMX/XPlus Receiver  </description>
    </item>
    
    <item>
      <title>Preflight</title>
      <link>http://chrismckenzie.io/projects/preflight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://chrismckenzie.io/projects/preflight/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>